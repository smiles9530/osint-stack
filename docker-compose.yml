services:
  db:
    build:
      context: ./db
    container_name: osint-db
    command: >
      postgres -c shared_preload_libraries=timescaledb
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL","pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 10
    ports:
      - "5432:5432"
    networks:
      - osint-net
  # qdrant:
  #   image: qdrant/qdrant:v1.9.0
  #   container_name: osint-qdrant
  #   environment:
  #     QDRANT__SERVICE__API_KEY: ${QDRANT__SERVICE__API_KEY}
  #   volumes:
  #     - qdrant_data:/qdrant/storage
  #   ports:
  #     - "6333:6333"
  #   networks:
  #     - osint-net
  # Removed Qdrant - using PGVector instead
  typesense:
    image: typesense/typesense:0.25.2
    container_name: osint-typesense
    environment:
      TYPESENSE_DATA_DIR: /data
      TYPESENSE_API_KEY: ${TYPESENSE_API_KEY}
      TYPESENSE_ENABLE_CORS: "true"
    volumes:
      - typesense_data:/data
    healthcheck:
      test: ["CMD-SHELL", "pgrep -f typesense-server || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    ports:
      - "8108:8108"
    networks:
      - osint-net
  ollama:
    image: ollama/ollama:latest
    container_name: osint-ollama
    volumes:
      - ollama_data:/root/.ollama
      - ./ollama-gpu-config.json:/root/.ollama/config.json:ro
    environment:
      OLLAMA_KEEP_ALIVE: "-1"
      OLLAMA_GPU_LAYERS: "-1"
      OLLAMA_GPU_MEMORY_FRACTION: "0.95"
      OLLAMA_GPU_MEMORY_RESERVE: "512"
      OLLAMA_NUM_CTX: "8192"
      OLLAMA_NUM_BATCH: "1024"
    ports:
      - "11434:11434"
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "ollama", "list"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - osint-net

  ollama-init:
    image: ollama/ollama:latest
    container_name: osint-ollama-init
    depends_on:
      ollama:
        condition: service_healthy
    environment:
      OLLAMA_HOST: http://ollama:11434
      OLLAMA_EMBED_MODEL: ${OLLAMA_EMBED_MODEL}
      OLLAMA_GPU_LAYERS: "-1"
      OLLAMA_GPU_MEMORY_FRACTION: "0.95"
      OLLAMA_GPU_MEMORY_RESERVE: "512"
      OLLAMA_NUM_CTX: "8192"
      OLLAMA_NUM_BATCH: "1024"
    volumes:
      - ./scripts:/scripts
    entrypoint: ["/scripts/init-ollama-models.sh"]
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    networks:
      - osint-net
    profiles:
      - init

  redis:
    image: redis:7-alpine
    container_name: osint-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    networks:
      - osint-net
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  minio:
    image: minio/minio:latest
    container_name: osint-minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - osint-net

  minio-init:
    image: minio/mc:latest
    container_name: osint-minio-init
    depends_on:
      minio:
        condition: service_healthy
    volumes:
      - ./scripts:/scripts
    entrypoint: ["/scripts/init-minio.sh"]
    networks:
      - osint-net
    profiles:
      - init

  frontend:
    build:
      context: ./services/frontend
      dockerfile: Dockerfile
    container_name: osint-frontend
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_WS_URL=ws://localhost:8000
    depends_on:
      - api
    networks:
      - osint-net

  nginx:
    image: nginx:alpine
    container_name: osint-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/api-load-balancer.conf:/etc/nginx/conf.d/api-load-balancer.conf:ro
    depends_on:
      - api
      - redis
      - frontend
    networks:
      - osint-net
    healthcheck:
      test: ["CMD-SHELL", "pgrep -f nginx || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # API Load Balancer (separate service for API-only load balancing)
  api-load-balancer:
    image: nginx:alpine
    container_name: osint-api-lb
    ports:
      - "8080:80"
    volumes:
      - ./nginx/api-load-balancer.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - api
    networks:
      - osint-net
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
  api:
    build:
      context: ./services/api
    container_name: osint-api
    depends_on:
      db:
        condition: service_started
      # qdrant:
      #   condition: service_started  # Removed Qdrant dependency
      typesense:
        condition: service_started
      ollama:
        condition: service_healthy
      redis:
        condition: service_started
      minio:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:${POSTGRES_PORT}/${POSTGRES_DB}
      # QDRANT_URL: http://qdrant:6333  # Removed Qdrant
      # QDRANT_API_KEY: ${QDRANT__SERVICE__API_KEY}  # Removed Qdrant
      TYPESENSE_URL: http://typesense:8108
      TYPESENSE_API_KEY: ${TYPESENSE_API_KEY}
      OLLAMA_HOST: ${OLLAMA_HOST}
      OLLAMA_EMBED_MODEL: ${OLLAMA_EMBED_MODEL}
      EMBEDDINGS_BACKEND: ${EMBEDDINGS_BACKEND}
      LOCAL_EMBED_MODEL: ${LOCAL_EMBED_MODEL}
      API_HOST: ${API_HOST}
      API_PORT: ${API_PORT}
      API_LOG_LEVEL: ${API_LOG_LEVEL}
      REDIS_URL: redis://redis:6379/0
      MINIO_ENDPOINT: ${MINIO_ENDPOINT}
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
      MINIO_SECURE: ${MINIO_SECURE}
      SECRET_KEY: ${SECRET_KEY}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${ACCESS_TOKEN_EXPIRE_MINUTES}
      # Parallel processing configuration
      PARALLEL_WORKERS: ${PARALLEL_WORKERS:-4}
      MAX_BATCH_SIZE: ${MAX_BATCH_SIZE:-50}
      ENABLE_PARALLEL_PROCESSING: ${ENABLE_PARALLEL_PROCESSING:-true}
      # Transformer models configuration
      TRANSFORMERS_CACHE: /app/models
      HF_HOME: /app/models
      TORCH_HOME: /app/models
      # GPU configuration
      CUDA_VISIBLE_DEVICES: 0
      PYTORCH_CUDA_ALLOC_CONF: max_split_size_mb:512
      TORCH_DEVICE: cuda
    ports:
      - "8000:8000"
    volumes:
      - ./sources.json:/app/sources.json:ro
      - ./models:/app/models
    # Resource limits for optimal CPU utilization and transformer models
    deploy:
      resources:
        limits:
          cpus: '6.0'
          memory: 8G
        reservations:
          cpus: '4.0'
          memory: 6G
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    # Enable shared memory for multiprocessing and model loading
    shm_size: 2gb
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - osint-net


  # Forecasting and bandit service
  forecast:
    build: ./services/forecast
    container_name: osint-forecast
    depends_on:
      db:
        condition: service_started
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:${POSTGRES_PORT}/${POSTGRES_DB}
      # Parallel processing configuration
      PARALLEL_WORKERS: ${PARALLEL_WORKERS:-4}
      MAX_BATCH_SIZE: ${MAX_BATCH_SIZE:-50}
      ENABLE_PARALLEL_PROCESSING: ${ENABLE_PARALLEL_PROCESSING:-true}
    ports:
      - "8200:8200"
    # Resource limits for optimal CPU utilization
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
    # Enable shared memory for multiprocessing
    shm_size: 512mb
    networks:
      - osint-net
    healthcheck:
      test: ["CMD-SHELL", "pidof uvicorn || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  n8n:
    build:
      context: ./n8n
      dockerfile: Dockerfile
    container_name: osint-n8n
    depends_on:
      - db
      - api
      - forecast
    environment:
      # Basic Configuration
      N8N_HOST: ${N8N_HOST}
      WEBHOOK_URL: ${N8N_PROTOCOL}://${N8N_HOST}:${N8N_PORT}/
      N8N_PORT: ${N8N_PORT}
      N8N_PROTOCOL: ${N8N_PROTOCOL}
      N8N_ENCRYPTION_KEY: ${N8N_ENCRYPTION_KEY}
      GENERIC_TIMEZONE: ${GENERIC_TIMEZONE}
      
      # PostgreSQL Database Configuration
      DB_TYPE: postgresdb
      DB_POSTGRESDB_HOST: db
      DB_POSTGRESDB_PORT: ${POSTGRES_PORT}
      DB_POSTGRESDB_DATABASE: n8n
      DB_POSTGRESDB_USER: ${POSTGRES_USER}
      DB_POSTGRESDB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_POSTGRESDB_SCHEMA: public
      DB_POSTGRESDB_SSL: false
      DB_POSTGRESDB_POOL_SIZE: 20
      DB_POSTGRESDB_CONNECTION_TIMEOUT: 30000
      DB_POSTGRESDB_ACQUIRE_TIMEOUT: 30000
      DB_POSTGRESDB_TIMEOUT: 30000
      
      # Performance Optimizations
      N8N_METRICS: true
      N8N_DIAGNOSTICS_ENABLED: true
      N8N_LOG_LEVEL: info
      N8N_LOG_OUTPUT: console
      
      # Queue Configuration (Redis) - Enable Queue Mode
      N8N_RUNNERS_ENABLED: true
      N8N_RUNNERS_MODE: internal
      QUEUE_BULL_REDIS_HOST: redis
      QUEUE_BULL_REDIS_PORT: 6379
      QUEUE_BULL_REDIS_DB: 1
      QUEUE_BULL_REDIS_PASSWORD: ""
      
      # Queue Performance Settings
      QUEUE_BULL_REDIS_CONNECTION_TIMEOUT: 30000
      QUEUE_BULL_REDIS_COMMAND_TIMEOUT: 30000
      QUEUE_BULL_REDIS_RETRY_DELAY_ON_FAILOVER: 100
      QUEUE_BULL_REDIS_MAX_RETRIES_PER_REQUEST: 3
      
      # Execution Settings
      EXECUTIONS_TIMEOUT: 3600
      EXECUTIONS_TIMEOUT_MAX: 7200
      EXECUTIONS_DATA_SAVE_ON_ERROR: all
      EXECUTIONS_DATA_SAVE_ON_SUCCESS: all
      EXECUTIONS_DATA_SAVE_MANUAL_EXECUTIONS: true
      EXECUTIONS_DATA_SAVE_ON_PROGRESS: true
      
      # Workflow Settings
      WORKFLOWS_DEFAULT_NAME: 'My workflow'
      WORKFLOWS_ONBOARDING_FLOW_DISABLED: true
      
      # Security and Performance
      N8N_BLOCK_ENV_ACCESS_IN_NODE: false
      N8N_DISABLE_UI: false
      
      # Puppeteer Configuration
      PUPPETEER_SKIP_CHROMIUM_DOWNLOAD: true
      PUPPETEER_EXECUTABLE_PATH: /usr/bin/chromium-browser
      PUPPETEER_ARGS: "--no-sandbox --disable-setuid-sandbox --disable-dev-shm-usage --disable-accelerated-2d-canvas --no-first-run --no-zygote --disable-gpu --disable-web-security --disable-features=VizDisplayCompositor --memory-pressure-off --max_old_space_size=4096"
      
      # Node.js Performance
      NODE_OPTIONS: "--max-old-space-size=4096"
    ports:
      - "5678:5678"
    volumes:
      - n8n_data:/home/node/.n8n
      - ./n8n/workflows:/home/node/workflows
      - ./sources.json:/home/node/sources.json:ro
    # Resource limits for optimal performance
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
    security_opt:
      - seccomp:unconfined
    shm_size: 2gb
    networks:
      - osint-net

  # N8N Worker Instances for Queue Processing
  n8n-worker-1:
    build:
      context: ./n8n
      dockerfile: Dockerfile
    container_name: osint-n8n-worker-1
    depends_on:
      - db
      - redis
    environment:
      # Basic Configuration
      N8N_HOST: ${N8N_HOST}
      N8N_PORT: ${N8N_PORT}
      N8N_PROTOCOL: ${N8N_PROTOCOL}
      N8N_ENCRYPTION_KEY: ${N8N_ENCRYPTION_KEY}
      GENERIC_TIMEZONE: ${GENERIC_TIMEZONE}
      
      # PostgreSQL Database Configuration
      DB_TYPE: postgresdb
      DB_POSTGRESDB_HOST: db
      DB_POSTGRESDB_PORT: ${POSTGRES_PORT}
      DB_POSTGRESDB_DATABASE: n8n
      DB_POSTGRESDB_USER: ${POSTGRES_USER}
      DB_POSTGRESDB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_POSTGRESDB_SCHEMA: public
      DB_POSTGRESDB_SSL: false
      DB_POSTGRESDB_POOL_SIZE: 10
      DB_POSTGRESDB_CONNECTION_TIMEOUT: 30000
      DB_POSTGRESDB_ACQUIRE_TIMEOUT: 30000
      DB_POSTGRESDB_TIMEOUT: 30000
      
      # Queue Configuration - Worker Mode
      N8N_RUNNERS_ENABLED: true
      N8N_RUNNERS_MODE: internal
      QUEUE_BULL_REDIS_HOST: redis
      QUEUE_BULL_REDIS_PORT: 6379
      QUEUE_BULL_REDIS_DB: 1
      QUEUE_BULL_REDIS_PASSWORD: ""
      
      # Worker Settings
      N8N_DISABLE_UI: true
      N8N_LOG_LEVEL: info
      N8N_LOG_OUTPUT: console
      
      # Puppeteer Configuration
      PUPPETEER_SKIP_CHROMIUM_DOWNLOAD: true
      PUPPETEER_EXECUTABLE_PATH: /usr/bin/chromium-browser
      PUPPETEER_ARGS: "--no-sandbox --disable-setuid-sandbox --disable-dev-shm-usage --disable-accelerated-2d-canvas --no-first-run --no-zygote --disable-gpu --disable-web-security --disable-features=VizDisplayCompositor --memory-pressure-off --max_old_space_size=2048"
      
      # Node.js Performance
      NODE_OPTIONS: "--max-old-space-size=2048"
    volumes:
      - n8n_data:/home/node/.n8n
      - ./n8n/workflows:/home/node/workflows
      - ./sources.json:/home/node/sources.json:ro
    # Resource limits for worker
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
    security_opt:
      - seccomp:unconfined
    shm_size: 1gb
    networks:
      - osint-net

  n8n-worker-2:
    build:
      context: ./n8n
      dockerfile: Dockerfile
    container_name: osint-n8n-worker-2
    depends_on:
      - db
      - redis
    environment:
      # Basic Configuration
      N8N_HOST: ${N8N_HOST}
      N8N_PORT: ${N8N_PORT}
      N8N_PROTOCOL: ${N8N_PROTOCOL}
      N8N_ENCRYPTION_KEY: ${N8N_ENCRYPTION_KEY}
      GENERIC_TIMEZONE: ${GENERIC_TIMEZONE}
      
      # PostgreSQL Database Configuration
      DB_TYPE: postgresdb
      DB_POSTGRESDB_HOST: db
      DB_POSTGRESDB_PORT: ${POSTGRES_PORT}
      DB_POSTGRESDB_DATABASE: n8n
      DB_POSTGRESDB_USER: ${POSTGRES_USER}
      DB_POSTGRESDB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_POSTGRESDB_SCHEMA: public
      DB_POSTGRESDB_SSL: false
      DB_POSTGRESDB_POOL_SIZE: 10
      DB_POSTGRESDB_CONNECTION_TIMEOUT: 30000
      DB_POSTGRESDB_ACQUIRE_TIMEOUT: 30000
      DB_POSTGRESDB_TIMEOUT: 30000
      
      # Queue Configuration - Worker Mode
      N8N_RUNNERS_ENABLED: true
      N8N_RUNNERS_MODE: internal
      QUEUE_BULL_REDIS_HOST: redis
      QUEUE_BULL_REDIS_PORT: 6379
      QUEUE_BULL_REDIS_DB: 1
      QUEUE_BULL_REDIS_PASSWORD: ""
      
      # Worker Settings
      N8N_DISABLE_UI: true
      N8N_LOG_LEVEL: info
      N8N_LOG_OUTPUT: console
      
      # Puppeteer Configuration
      PUPPETEER_SKIP_CHROMIUM_DOWNLOAD: true
      PUPPETEER_EXECUTABLE_PATH: /usr/bin/chromium-browser
      PUPPETEER_ARGS: "--no-sandbox --disable-setuid-sandbox --disable-dev-shm-usage --disable-accelerated-2d-canvas --no-first-run --no-zygote --disable-gpu --disable-web-security --disable-features=VizDisplayCompositor --memory-pressure-off --max_old_space_size=2048"
      
      # Node.js Performance
      NODE_OPTIONS: "--max-old-space-size=2048"
    volumes:
      - n8n_data:/home/node/.n8n
      - ./n8n/workflows:/home/node/workflows
      - ./sources.json:/home/node/sources.json:ro
    # Resource limits for worker
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
    security_opt:
      - seccomp:unconfined
    shm_size: 1gb
    networks:
      - osint-net

  superset:
    image: apache/superset:latest
    container_name: osint-superset
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8088/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    depends_on:
      - db
    environment:
      SUPERSET_SECRET_KEY: ${SUPERSET_SECRET_KEY}
      SUPERSET_LOAD_EXAMPLES: ${SUPERSET_LOAD_EXAMPLES}
      SUPERSET_DATABASE_URI: ${SUPERSET_DATABASE_URI}
      SQLALCHEMY_DATABASE_URI: ${SUPERSET_DATABASE_URI}
    volumes:
      - ./superset_home:/app/superset_home
    ports:
      - "8088:8088"
    networks:
      - osint-net
volumes:
  n8n_data:
  postgres_data:
  # qdrant_data:  # Removed Qdrant volume
  typesense_data:
  ollama_data:
  redis_data:
  minio_data:
networks:
  osint-net:
    driver: bridge
